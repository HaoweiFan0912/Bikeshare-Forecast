#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]


```{r}
#| include: false
#| warning: false
#| message: false
#### Workspace setup ####
set.seed(912)
# List of necessary packages
packages <- c("arrow", "lubridate", "tidyverse")
# Install missing packages
missing_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
install.packages(missing_packages)
# Load packages
lapply(packages, library, character.only = TRUE)

#### Read data ####
start <- read_parquet(here::here("data/02-analysis_data/start.parquet"))
stop <- read_parquet(here::here("data/02-analysis_data/stop.parquet"))
```

```{r}
#| warning: false
#| message: false
start_asdate <- start 
start_asdate$time <- as.Date(start_asdate$time)
daily_counts <- start_asdate %>%
  group_by(time) %>%
  summarise(total_count = sum(count))
ggplot(data = daily_counts, aes(x = time, y = total_count)) +
  geom_point() +
  labs(title = "Daily usage from January 2017 to September 2024", x = "Time", y = "Count") +
  theme_minimal()+  
  geom_smooth(method = "lm")  
```

```{r}
options(scipen = 999)

start_astime <- start 
start_astime$time <- as.POSIXct(start_astime$time)


start_astime <- start_astime %>%
  mutate(time_interval = case_when(
    hour(time) >= 0 & hour(time) < 4 ~ "00:00 - 04:00",
    hour(time) >= 4 & hour(time) < 8 ~ "04:00 - 08:00",
    hour(time) >= 8 & hour(time) < 12 ~ "08:00 - 12:00",
    hour(time) >= 12 & hour(time) < 16 ~ "12:00 - 16:00",
    hour(time) >= 16 & hour(time) < 20 ~ "16:00 - 20:00",
    hour(time) >= 20 & hour(time) < 24 ~ "20:00 - 00:00"
  ))


total_counts <- start_astime %>%
  group_by(time_interval) %>%
  summarise(count = sum(count, na.rm = TRUE)) %>%
  mutate(percentage = count / sum(count) * 100)

# 绘制条形图并添加百分比标签
ggplot(data = total_counts, aes(x = time_interval, y = count, fill = time_interval)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), 
            vjust = -0.5, size = 3) + # 添加百分比标签
  labs(title = "Total usage during different time periods from January 2017 to September 2024", 
       x = "Time interval", y = "Count") +
  theme_minimal() +
  theme(legend.position = "none")
```
```{r, fig.width=10}
options(scipen = 999)


# Create a new column for the time interval (every 1day)
start_1day <- start %>%
  mutate(date = as.Date(time))
stop_1day <- stop %>%
  mutate(date = as.Date(time))
start_1day <- start_1day %>% select(-time)
stop_1day <- stop_1day %>% select(-time)

# Group by from(to)_station_name and the new interval, then count the occurrences
start_1day1 <- start_1day %>%
  group_by(station_name, date) %>%
  summarise(total_count = sum(count), .groups = "drop") %>%
  ungroup()
stop_1day1 <- stop_1day %>%
  group_by(station_name, date) %>%
  summarise(total_count = sum(count), .groups = "drop") %>%
  ungroup()


average_counts_start <- start_1day1 %>%
  group_by(station_name) %>%
  summarize(average_count = mean(total_count, na.rm = TRUE))

average_counts_stop <- stop_1day1 %>%
  group_by(station_name) %>%
  summarize(average_count = mean(total_count, na.rm = TRUE))

merged_data <- merge(average_counts_start, average_counts_stop, by.x = "station_name", by.y = "station_name", all = TRUE)


merged_data <- merged_data %>%
  mutate(count_difference = ifelse((average_count.y - average_count.x) >= 0, 
                                   ceiling(average_count.y - average_count.x), 
                                   floor(average_count.y - average_count.x)))


ggplot(merged_data, aes(x = station_name, y = count_difference)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title = "Difference of daily average of bicycle parking and departure volumes for each station",
       x = "Station Name",
       y = "Parking volume minus departure volume")+
  ylim(-4, 3)+
  coord_flip()
```
```{r}
df_month <- start
df_month$time <- as.POSIXct(df_month$time, format = "%Y-%m-%d %H:%M:%S")
df_month <- df_month %>% select(-station_name)
# 提取年月信息并添加新列
df_month$year_month <- format(df_month$time, "%m")

# 按照年月和站点分组并汇总 count
monthly_count <- df_month %>%
  group_by(year_month) %>%
  summarise(total_count = sum(count)/30)

# 绘制每月所有站点的总和柱状图
ggplot(monthly_count, aes(x = year_month, y = total_count)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "每个月所有站台的 Count 总和",
       x = "年月",
       y = "总和 Count",
       fill = "站台名称") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


```{r}
md <- readRDS(here::here("models/Spadina_Ave___Harbord_St_-_SMART.rds"))
new_data <- start %>% filter(station_name == "Spadina Ave / Harbord St - SMART")
train <- new_data %>%
    mutate(
      hour = hour(time),
      day = day(time),
      month = month(time),
      year = year(time)
    )
new_data$Predicted <- predict(md, newdata = train)
new_data <- new_data[new_data$count <= 8, ]
ggplot(new_data, aes(x = count, y = exp(Predicted))) +
  geom_point(color = "blue", alpha = 0.7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") + 
  labs(
    title = "Scatter Plot of True vs Predicted Values",
    x = "True Values",
    y = "Predicted Values"
  ) +
  theme_minimal()

```

```{r}
md <- readRDS(here::here("models/Madison_Ave___Bloor_St_W.rds"))
new_data <- start %>% filter(station_name == "Madison Ave / Bloor St W")
train <- new_data %>%
    mutate(
      hour = hour(time),
      day = day(time),
      month = month(time),
      year = year(time)
    )
new_data$Predicted <- predict(md, newdata = train)
new_data$Predicted
new_data <- new_data[new_data$count <= 8, ]
ggplot(new_data, aes(x = count, y = exp(exp(Predicted)))) +
  geom_point(color = "blue", alpha = 0.7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") + 
  labs(
    title = "Scatter Plot of True vs b Predicted Values",
    x = "True Values",
    y = "Predicted Values"
  ) +
  theme_minimal()


```
```{r}
md <- readRDS(here::here("models/Galbraith_Rd___King's_College_Rd.rds"))
new_data <- start %>% filter(station_name == "Galbraith Rd / King's College Rd")
train <- new_data %>%
    mutate(
      hour = hour(time),
      day = day(time),
      month = month(time),
      year = year(time)
    )
new_data$Predicted <- predict(md, newdata = train)
new_data <- new_data[new_data$count <= 8, ]
ggplot(new_data, aes(x = count, y = exp(Predicted))) +
  geom_point(color = "blue", alpha = 0.7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") + 
  labs(
    title = "Scatter Plot of True vs Predicted Values",
    x = "True Values",
    y = "Predicted Values"
  ) +
  theme_minimal()
```

```{r}
md <- readRDS(here::here("models/Ursula_Franklin_St___Huron_St_-_SMART.rds"))
new_data <- start %>% filter(station_name == "Ursula Franklin St / Huron St - SMART")
train <- new_data %>%
    mutate(
      hour = hour(time),
      day = day(time),
      month = month(time),
      year = year(time)
    )
new_data$Predicted <- predict(md, newdata = train)
new_data <- new_data[new_data$count <= 8, ]
ggplot(new_data, aes(x = count, y = exp(Predicted))) +
  geom_point(color = "blue", alpha = 0.7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") + 
  labs(
    title = "Scatter Plot of True vs Predicted Values",
    x = "True Values",
    y = "Predicted Values"
  ) +
  theme_minimal()
```
```{r}
ut_stations <- c("Madison Ave / Bloor St W", "Bloor St W / Huron St", "St. George St / Bloor St W", 
                 "Sussex Ave / St George St", "Spadina Ave / Sussex Ave", "Spadina Ave / Harbord St - SMART",
                 "St. George St / Hoskin Ave", "Spadina Ave / Willcocks St", "St. George St / Willcocks St",
                 "Willcocks St / St. George St", "Queen's Park / Bloor St W", "Queen's Park Cres W / Hoskin Ave",
                 "Wellesley St W / Queen's Park Cres", "Queen's Park Cres E / Grosvenor St - SMART", 
                 "Bay St / Bloor St W (East Side)", "Bay St / Bloor St W (West Side)", "Bay St / Charles St W - SMART",
                 "St. Joseph St / Bay St - SMART", "Bay St / St. Joseph St", "Bay St / Wellesley St W", 
                 "Ursula Franklin St / Huron St - SMART", "Ursula Franklin St / St. George St - SMART", "Galbraith Rd / King's College Rd",
                 "College St / Huron St", "College St / Henry St ", "Queens Park Cres / College St ", "University Ave / College St (East)")

result <- data_frame(station_name = ut_stations, time = as.POSIXct("2025-09-26 04:00:00", format = "%Y-%m-%d %H:%M:%S"))

for (station in ut_stations) {
  station_data <- subset(start, station_name == station)
  path <- paste(paste0("models/", gsub("[ /]", "_", station), ".rds"))
  md <- readRDS(here::here(path))
  target <- data_frame(
    hour = 4,
    day = 26,
    month = 9,
    year = 2026
  )
  target$predicted <- ceiling(exp(predict(md, newdata = target)))
  target$station_name <- station
  target <- target %>% select(-hour,-day,-month,-year)
  result[result$station_name == station, "prediction"] <- target$predicted
}

data2024 <- start
for (station in ut_stations) {
  date <- "2024-09-26 04:00:00"
  exists <- nrow(data2024[data2024$station_name == station & data2024$time == date, ]) > 0
  
  if (!exists) {
    new_row <- data.frame(
      station_name = station,
      time = date,
      count = 0
    )
    data2024 <- rbind(data2024, new_row)
  }
}

data2024 <- data2024[data2024$time == "2024-09-26 04:00:00", ]

names(result)[names(result) == "time"] <- "target_time"


data_fi <- merge(data2024, result, by = "station_name")

data_fi$growth <- data_fi$prediction - data_fi$count

data_fi

n <- sum(data_fi$growth)/27
n
```


